30-34、
30理解事件
    1、什么是事件
        事件是Web浏览器通知应用程序（比如我们的js）发生了某个事情！
        我们可以为这些特定的事情，事先安排好处理方案，这样就能够实现互动！
    2、事件目标
        你可以简单的理解为事件发生在的最具体的那个目标元素即为事件目标，有时也可能是document或者window!
    3、事件类型
        事件类型是一个用来说明发生了什么类型事件的字符串，你可以简单的理解为事件的名字！
        常见的事件类型有哪些？
        1）常用的与浏览器有关的事件类型：
            ①resize
               当窗口或者框架的大小变化时在window对象上或框架上触发
            ②scroll
               当用户滑动（滚动）带有滚动条的元素中的内容时在该元素上触发
               滑动整个页面会在document以及window上触发
            ③error
               当发生JavaScript错误时在window上面触发，当无法加载图像时在<img>元素上面触发，当无法加载嵌入内容时在<object>
               元素上面触发，或者当有一或多个框架无法加载时在框架集上面触发
31 常用的与文档加载有关的事件类型              
       
            ①load
               当页面完全加载后（包括所有图像、JavaScript文件、CSS文件等外部资源）在window对象上触发。
               当所有的框架都加载完毕的时候会在框架集上面触发，
               当图像加载完毕时会在img元素上面触发
               使用object元素嵌入的内容加载完毕时会在object元素上触发
               说白了：等内容（包括外部资源）加载完毕之后，在对应的元素对象上面触发
            ②beforeunload
               会在window对象上面触发这个事件，让开发人员有可能在页面卸载前阻止这一操作。
               这个事件会在浏览器卸载页面之前触发，可以通过它来取消卸载并继续使用原有页面。
               将事件对象的returnValue 属性设置为要显示给用户的内容，并且将其返回才能够实现兼容各种浏览器;
32 常用的与表单有关的事件类型：              
        
            ①blur
               在元素失去焦点时在对应的元素上触发，该事件不会冒泡
               document.getElementById('text1').addEventListener('blur', function(){
			console.log('失去焦点');
		});
            ②focus
               在元素获得焦点时触发在对应的元素上，这个事件不会冒泡
            ③select
               当用户选择文本框（<input>或<texterea>）中的一或多个字符时，在对应的元素上触发
            ④change
               对于<input>和<textarea>元素，在它们失去焦点且value 值改变时在对应元素上触发
               对于<select>元素，在其选项改变时在select元素上触发
            ⑤submit
               浏览器会在将请求发送给服务器之前在对应的表单上触发submit事件
               document.getElementById('form1').addEventListener('submit', function(){
			alert('你点击了提交');

		});
        4）常用的与键盘有关的事件类型：
            ①keydown
               当用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件
               事件对象中keyCode属性表示     键码
            ②keyup
               当用户释放键盘上的键时触发
            ③keypress
               当用户按下键盘上的字符键时触发，而且如果按住不放的话，不会重复触发此事件
               事件对象中charCode属性表示    ASCII码
               document.addEventListener('keypress', function(){
			console.log('失去焦点');
		});
 33  常用的与鼠标有关的事件类型            
            我们的与鼠标有关的事件类型，最能体现”事件传播“,由于我们后面需要专门的一节课来学习”事件传播“，
            所以说，我们这节课在讲鼠标有关的事件类型的时候，我们先避开”事件传播“这个概念！
            ①click
               在用户点击鼠标或者按下回车键时或者移动用户触摸时触发
            ②dblclick
               在用户双击鼠标时触发
               document.addEventListener('dblclick', function(){
			console.log('失去焦点');
		});
            ③mousedown
               按下鼠标按键时，会发生 mousedown 事件
               与 click 事件不同，mousedown 事件仅需要按键被按下，而不需要松开即可发生
            ④mouseup
               在用户释放鼠标按钮时触发
            ⑤mouseenter
               在鼠标光标从元素外部移动到元素范围之内时触发,这个事件不冒泡
            ⑥mouseleave
               在位于元素上的鼠标光标移动到元素范围之外时触发,这个事件不冒泡
            ⑦mouseover
               在鼠标指针移入一个元素边界之内,或者移入任何后代元素时触发
            ⑧mouseout
               鼠标从当前元素移动到其他元素时触发（哪怕移动到的元素是当前元素的后代元素或者离开任何后代元素）
               document.getElementById('div1').addEventListener('mouseout', function(){
			console.log('失去焦点');
            ⑨mousemove
               当鼠标指针在元素内部移动时重复地触发
            
    4、事件处理程序(事件监听程序)
        我们通过DOM对象的addEventListener方法来为具体的目标绑定对应的事件处理函数
        Internet Explorer 8 及更早IE版本不支持 addEventListener() ，Opera 7.0 以及更早版本也不支持。
        当然我们目前只是用这个原生的方法演示一下即可，后面我们jQuery会提供一个兼容各种浏览器的方法!
        addEventListener()参数说明：
              eventType：字符串，表示监听的事件类型
              function：事件在预定目标发生时，执行的函数
              useCapture：(可选)布尔值，是否注册到捕获阶段，默认false
34   事件传播（事件流）

            事件传播有三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段
            
            事件捕获阶段：如果有绑定在事件捕获阶段的处理函数则按照捕获的顺序执行
            处于目标阶段：如果有直接绑定在事件目标上的处理函数则按照绑定的先后顺序来执行（不管addEventListener的第三个参数是true

还是false）
            事件冒泡阶段：如果有绑定在事件冒泡阶段的处理函数则按照冒泡的顺序执行
            
        PS:并不是所有的事件类型都支持事件冒泡！低版本的ie浏览器也没有捕获这个阶段！
        一堆烂摊子，坐等我们后面jQuery来解决这个问题！
    //事件捕获阶段  目标阶段  冒泡阶段
	//window_true document_true html_true body_true 先走捕获阶段truen属性从上层往下层的
	//到了div是目标对象，按绑定顺序
	//再走冒泡阶段从下往上层window_false document_false html_false body_false
35 事件处理5
	mouseenter与mouserover区别。mouseleave（不冒泡）与mouseout（冒泡 任意目标）原理同前面二个区别
	mouseenter光标从目标元素的外部移动到目标元素内时发生此事件，不会事件冒泡 分别移入div 输出divmouseenter和div里的p pmouseenter
	mouserover光标从任意目标移动到目标元素内时发生此事件 ，会事件冒泡,事件传播.比如移到div,输出div mouserover再移到div里的p上，会输出p1 mouseover 和div mouserover.移出p1也会出现divmouseover
		div1.addEventListener('mouseover',function(){
			console.log('div2 mouseoverr') //div2 mouseover
		});
		p1.addEventListener('mouseover',function(){
			console.log('p1 mouseover') //额外出现p1 mouserover 和div2mouseover
		});
    
    事件对象
    	当事件处理函数执行的时候，事件处理函数会接受到参数->事件对象  ，使用一个变量接收即可。事件对象内部包含了与该事件类型和目标有关的数据，不同的事件类型，包含的属性和方法可能也不太一致。   
    	bubbles Boolean 表明是否冒泡，返回true或者false
    	div1.addEventListener('mouseenter',function(e){
			console.log(e.bubbles); //false 如果是mouseover则会是true
		});  
		preventDefault() 事件函数  取消事件的默认行为
		a1.addEventListener('click', function(e){
			e.preventDefault();//点了a后不会跳转，默认会跳转到其他链接网页的，表单一样，如果取消了默认，提交不会提交和刷新页面
		})
		stopImmediatePropagation() 事件函数 忽略未执行的事件处理函数（包括本函数本元素同等后面的函数），不再传播冒泡事件了
		p1.addEventListener('click',function(e){
			console.log('p1 click')
			e.stopImmediatePropagation();//不会执行后面的冒泡了，所以下面的div1 click不会输出  下面的p1.click还是会执行的
		});
		p1.addEventListener('click',function(e){
			console.log('p1 click停止事件传播之后的函数不会执行');//不会执行
			});
		div1.addEventListener('click',function(e){
			console.log('div1 click')
		});
		stopPropagation()函数 执行完当前元素的所有函数外，不执行非当前元素的冒泡传播，如上例中换成这个函数，函数2会执行
		target element对象  事件目标 具体的操作对象目标  e.target.tagName //div p
		p1.addEventListener('click',function(e){
			console.log(e.target);
		});
		currentTarget element对象  事件处理程序当前正在处理事件的那个元素，绑定事件的那个对象
		比如绑定事件div的click事件 点击div里的p元素 target就是p currentTarget就是div
		type 事件类型
		注意，在事件程序内部，this始终代表correntTarget 不是target

		36 7、事件委托
        正常思路：
            直接将事件处理函数绑定到事件目标上！
        事件委托：
            将事件处理函数委托给他们的祖先对象！
            事件冒泡！
            退一步，海阔天空！ 
        注意点：
            事件类型必须要支持事件冒泡！
            大家最好将委托对象选择为 是举例事件目标近一点的！
            		//事件委托，利用了冒泡原理 祖先元素下面的子元素操作会触发祖先元素事件
		div1.addEventListener('click',function(e){
			switch (e.target.tagName) {
				case 'P':
					console.log('你点击了P')
					break;
				case 'A':
				    //alert($(e.target).hasClass('class1'));
					//e.preventDefault;
					if ($(e.target).hasClass('class1')){
						e.preventDefault();
						console.log('你点击了有class1类名的A');
						
					}else {
						console.log('你点击了没有class1类名的A')
					}
					break;
				default:
					console.log('随便你点击了什么')
					break;
			}
		});
        
  jq事件处理
  	绑定事件处理函数
        1）使用on方法绑定事件处理函数
           从jQuery1.7版本开始，on() 方法是将事件处理程序绑定到文档的首选方法！
            使用说明：
            1> jQuery对象.on('事件类型'[,选择器][,数据],handler(eventObject) )
                 事件类型：
                        一个或多个空格分隔的事件类型和可选的命名空间
                 选择器：
                        一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，
                        那么被选中的元素总是能触发事件
                        
                        传入选择器就代表，在绑定目标的后代范围内，与选择器相匹配的元素在发生指定事件类型时
                        才会执行这个处理函数！
                        
                        传不传选择器，完全就是两个世界！传入选择器会非常的强大！
                 数据：
                        如果data参数传给.on()并且不是null 或者 undefined，那么每次触发事件时，data参数都传递给处理程序。data
                        参数可以是任何类型，但如果是字符串类型时，那么selector参数必须提供，或明确地传递null，这样的 data 参
                        数不会误认为是选择器。最好是使用一个对象（键值对） ，所以可以作为属性传递多个值
                 事件处理函数：
                        事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false
	37 jq强大之处区别1 on传入第二个选择器参数，相当于使用了事件委托
		$('#div1').on('click', 'p,a', function(e) {
		//$('#div1 p,#div1 a').on('click', null, function(e) { //这句与上面的区别在于on里面加了选择器，那么后添加的P也有效，这句话前面直接筛选了就不会对后面添加的P有效
			console.log('你点击了这或者a')
		});
		$('#div1').append('<p>新添加的P</p>')

	区别分析2 mounserenter不支持冒泡，但用on就可以达到效果了。下面js里的p和a移动上去就不行了，只有div上会输出，因为enter不支持冒泡。进入时不会输出。改成click或者mouserover就可以，因为支持冒泡
	 	$('#div1').on('mouseenter', 'p,a', function(e) {
			console.log('你点击了这或者a')
		});
		$('#div1').append('<p>新添加的P</p>')

		div1.addEventListener('mouseenter',function(e){
			switch (e.target.tagName) {
				case 'P':
					console.log('你点击了P')
					break;
				case 'A':
				    //alert($(e.target).hasClass('class1'));
					//e.preventDefault;
					if ($(e.target).hasClass('class1')){
						e.preventDefault();
						console.log('你点击了有class1类名的A');
						
					}else {
						console.log('你点击了没有class1类名的A')
					}
					break;
				default:
					console.log('随便你点击了什么')
					break;
		}
		});

		  /*//jqE随意写，代表传入参数，data是获得参数的属性
    $('#div1').on('click','p',{name:'张三',age:18},function(jqE){
        console.log(jqE.data);
    });
    */
    
    /*
    //当传入的数据位字符形式时，为防止干扰，我们必须显示的写出第二个选择器参数（null）
    $('#div1').on('click',null,'孙胜利',function(jqE){
        console.log(jqE.data);
    });
    */
    
    /*
    $('#div1').on('click','a',function(){
        return false;    
    });
    //可以简写：
    */
    //对于只需要阻止默认行为的事件处理函数（函数内，只需要return false的话）可以简写为：
    $('#div1').on('click','a',false);
    
});

38  on的其他用法
$('#div1').on({
	'click':function(event) {  //'click mousenter可以代替二面二个函数'
		console.log(event.data.name+'你点击了');
		},
	'mouseenter':function(event) {
		console.log(event.data.name+'mouseenter');
		},
	'mouseover':function(event){
	  console.log(event.data.name+'mouseover');
	}	
	}
	
	,'p',{name:'张三',age:18}
	
)
//对于直接事件(click对象是对象本身)，处理程序内部的this代表绑定事件 的元素对象
/*$('#div1').on('click',function(){
	console.log(this) //<div id="div1"> $(this)则输出jq对象Object[div#div1]
})*/
//对于委托事件而言，this代表了与selector相匹配的元素对象如下例中的p而不是div
$('#div1').on('click','p',function(){
	console.log(this) // <p id="p1"> $(this)则输出jq对象Object[p#p1]
})
名词解释
currentTarge 等于函数的this div
target 触发事件的事件目标  p
data 返回绑定事件时传递给绑定方法的可选数据参数
pageX 左上角的鼠标位置
pageY Y方向上的鼠标位置
stopImmediatePrepagation()阻止剩余的事件处理函数执行并且防止事件冒泡到DOM树上
stopPropagation() 防止事件冒泡到DOM上，也就是不触发任何前辈元素上的事件
